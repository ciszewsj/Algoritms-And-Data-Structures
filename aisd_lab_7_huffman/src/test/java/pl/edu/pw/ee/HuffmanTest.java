package pl.edu.pw.ee;

import org.junit.Test;

import java.io.FileNotFoundException;

import static pl.edu.pw.ee.HuffTree.generateHuffTreeFromString;

public class HuffmanTest {
	String a = "C:\\Study\\sem3.txt";
	String b = "C:\\Study\\sem3kod.txt";
	byte[] ac = {
			-108, 107, -8, -59, -74, -65, -68, -104, 81, -50, -111, 125, -37, -55, -92, -66, 124, -81, -102, -97, -56, -20, 85, -65, 21, 108, -20, 58, -2, 49, 108, 23, -55, -123, -49, 6, -15, -51, 98, 42, 58, 18, 47, -109, 11, -98, -41, -8, 92, -16, 101, 115, -59, -14, 97, 115, -38, -22, 22, 15, 127, -123, -32, -54, 41, -73, 10, -49, 54, -41, -14, 95, 34, 28, 23, 15, -92, 47, 6, -15, -111, -65, 115, -39, -36, 66, -115, -126, -31, -12, -123, -32, -66, -33, -38, -121, 88, -91, -108, 100, 4, 49, 21, 79, 51, -16, 95, -48, 59, -24, 72, -83, -44, 67, -25, 49, 23, 10, -49, 54, -37, -59, 54, -93, 111, -16, -22, -68, -121, -115, 89, 9, -39, 94, -88, -37, -4, 58, -72, 125, 33, 123, 85, -112, -99, -68, 101, 7, -34, 123, -15, 86, -2, -41, -70, -2, 110, 31, -60, 123, -40, -32, 93, -104, -72, 125, 33, 115, -121, 5, -10, -2, -44, 58, -59, 45, -29, 20, -63, 41, -34, 57, -84, 70, 53, -7, -23, -82, -60, 63, 61, -49, 21, -120, -81, -49, 113, -22, -28, 49, -19, -29, -102, -60, 86, 34, -23, -7, -49, 87, -26, 61, 95, -104, -11, 118, 33, -7, -113, 111, 25, 87, 87, -25, -91, -54, -71, 94, -84, 69, 114, 24, -122, 34, -4, 85, -82, 121, -125, -17, 25, 87, 87, -26, 34, -65, 61, 110, -78, -29, 17, 46, -27, 122, -72, -91, -54, -74, 87, 101, -124, 63, 49, 27, -58, 50, 50, 59, -58, 95, 109, -28, -46, 95, 61, 74, 79, -100, -60, 101, 81, -85, -81, -111, -56, 98, 43, -118, -4, -60, 111, 20, -38, -127, -25, 78, -69, 17, 125, -85, 35, -8, -78, 123, -59, 39, -85, 39, -68, 82, 122, -66, -111, -4, 111, 25, 110, -65, 49, 12, 122, -2, -46, 60, -104, -109, -43, -7, 3, -62, 114, -65, -76, -60, 123, -39, -15, 79, -127, -89, 33, -120, 123, -88, 62, 76, 123, -49, 92, 85, -12, 1, 88, -121, 33, -120, -34, 49, 76, 18, -99, -29, -102, -60, 99, 95, -98, -102, -20, 67, -13, -36, -15, 88, -118, -4, -9, 30, -82, 67, 30, -105, -93, 25, 25, 25, 29, -30, -97, 3, 78, 66, 118, 85, 115, 64, -13, 107, -123, 103, -101, 108, -81, -70, -6, 28, -84, 45, -92, 83, 113, -22, -60, 84, -92, -7, -51, -74, -15, -106, -11, 94, 119, -89, -1, 95, -118, -73, -28, 116, 14, -54, -29, -41, -35, -105, -99, -91, 38, -83, -99, 89, -24, 29, -68, 83, -32, 105, -56, 78, -54, -82, 104, 30, 109, 112, -84, -13, 109, -107, -9, 95, 67, -107, -123, -76, -118, 110, 61, 88, -118, -108, -97, 57, -74, -34, 50, -34, -85, -50, -12, -1, -21, -15, 86, -4, -114, -127, -39, 92, 122, -5, -78, -13, -76, -92, -43, -77, -85, 61, 3, -73, -116, 83, 4, -89, 120, -26, -79, 24, -41, -25, -90, -69, 16, -4, -9, 60, 86, 34, -65, 61, -57, -85, -112, -57, -91, -24, -58, 70, 95, -17, 20, -2, 71, -109, 86, -5, 80, 63, -113, 76, -11, -26, 85, 122, -13, -89, 100, -9, -118, 76, -116, 111, -59, 91, 39, 88, -85, -68, 101, -69, 47, 58, -81, 85, -120, 110, -12, -87, 60, 25, 95, -22, -62, -107, -5, -47, 7, 85, -120, -87, 67, -84, 85, -34, 41, -6, -8, -14, -100, -60, 89, 93, -109, -78, -56, -66, -33, -111, -52, 69, -12, -123, -51, -124, 29, 86, 33, -69, -19, -106, 24, -10, -15, 77, -65, -68, -104, 81, -50, -111, -75, 70, -84, 48, 53, -5, 72, -37, 43, -5, 95, 30, 83, -104, -117, -14, 57, -81, -91, 89, -112, -57, -73, -116, 83, 38, 23, 61, -86, 54, -2, 44, 31, 52, -4, -92, -61, 30, -90, -2, -46, 60, -104, -109, -41, 82, 124, -45, 16, -57, -93, -104, 61, 24, -33, 96, 119, -51, -84, 43, 55, 74, 84, 108, -68, -21, 7, 88, 86, 114, -88, -39, 121, -43, 122, -78, 72, -126, -40, 46, -108, -66, -21, -5, 107, 10, -52, 100, 26, -13, -89, 84, -17, -29, 29, -22, 109, -57, -81, -85, -17, -30, -79, 23, 74, 46, 105, 123, -49, 80, 32, -22, -87, -32, -6, 107, -102, 91, -58, 80, -107, -9, 95, -37, 88, 86, 108, -110, 23, 87, -100, -75, 111, -56, -17, -30, -54, -18, -111, -85, -16, 111, -85, -21, 17, 7, 87, 48, -92, 62, 66, 91, -58, 41, -73, -55, -123, -49, 107, -5, 95, 30, 83, -104, -117, -26, -108, -103, -66, -40, 116, -100, -76, -81, -19, -111, -52, 70, -15, -106, 107, 43, -113, 66, 107, -11, 70, -81, -63, -66, -54, -82, 123, 83, -14, 24, -116, 69, -97, 35, -55, -20, -4, -60, 102, 40, -26, -19, -121, -6, -73, 60, 86, 35, 43, -43, -120, -88, -37, -4, 58, -72, -11, 126, 122, -114, -124, -117, 53, 57, -120, -54, 47, -40, -32, -65, -46, 82, 100, 101, 103, 97, 68, -121, -26, -50, 107, -79, 22, 6, 5, -49, 106, -127, -115, 116, -89, -76, 38, -63, -13, -104, -115, -29, 28, -34, -6, 117, -16, 87, 48, 53, -121, 49, -36, -55, -84, -15, -107, 79, -26, 35, 42, -92, -54, -80, -101, 32, 54, 125, 84, -52, -66, -107, 97, 54, 15, -100, -61, 40, -26, 110, -82, -108, -10, -123, 93, -20, -77, -68, -121, 72, -38, 18, 30, -23, -70, -30, 62, 69, 110, -65, -75, -15, -27, 57, -120, -34, 50, -115, 47, 59, -98, -84, -119, 36, 101, 112, -2, 35, -34, 123, -15, 18, 72, -54, -30, 62, 64, 123, -103, -60, 17, -107, -61, -8, -113, 121, -17, -126, 12, 30, 27, -58, 66, 75, -23, -85, 126, -9, 88, -32, -77, -109, -34, -98, 124, -86, 18, -6, 106, -27, 115, -59, -3, -28, -10, -5, -9, 121, 62, 123, -17, 61, -57, -81, -77, -15, 47, -90, 19, -73, -116, 83, 4, -89, 120, -26, -79, 24, -41, -25, -90, -69, 16, -4, -9, 60, 86, 34, -65, 61, -57, -85, -112, -57, -73, -114, 107, 17, 88, -117, -89, -25, 61, 95, -104, -11, 126, 99, -43, -40, -121, -26, 61, -68, 101, 93, 95, -98, -105, 42, -27, 122, -79, 21, -56, 98, 24, -117, -15, 86, -71, -26, 15, -68, 101, 93, 95, -104, -118, -4, -11, -70, -53, -116, 68, -69, -107, -22, -30, -105, 42, -39, 93, -106, 16, -4, -60, 111, 16
	};
	public static String path = System.getProperty("user.dir") + "\\src\\test\\java\\pl\\edu\\pw\\ee\\datas\\";

	@Test
	public void test() throws FileNotFoundException {
		Huffman huffman = new Huffman();
//		huffman.huffman(a, true);
		//huffman.huffman(a, false);
		//System.out.println(huffman.decompress(ac));
//		System.out.println(huffman.huffman(a, true));
		System.out.println(huffman.huffman(path + "niemanie.txt", true));
		System.out.println(huffman.huffman(path + "niemanie.txt", false));
//		huffman.decompress(ac);
	}

	@Test
	public void a() {
		Huffman huffman = new Huffman();
//		byte a = 100;
////		byte b = 121;
//		for (int i = Byte.MIN_VALUE; i <= (int) Byte.MAX_VALUE; i += 1) {
//			System.out.println(i + 128 + " -->> " + (char) (i + 128) + " - >>>" + (int) (char) (i + 128));
//		}
//		assertEquals(bytesToString(stringToBytes(bytesToString(new byte[]{a, b}, 5)), 5), bytesToString(new byte[]{a, b}, 5));
//		assertArrayEquals(stringToBytes(bytesToString(new byte[]{a, b}, 5)), (new byte[]{a, b}));
	}

}
